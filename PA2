## Put comments here that give an overall description of what your
## functions do

## Write a short comment describing this function

## The makeCachematrix funciton creates a special "vector", 
## which can cache its inverse. 


makeCacheMatrix <- function(x = matrix()) {
        im <- NULL
        set <- function(y) {
                x <<- y
                im <<- NULL
        }
        get <- function() x
        setInverse <- function(inverse) im <<- inverse
        getInverse <- function() im
        list(set = set,
             get = get,
             setInverse = setInverse,
             getInverse = getInverse)
}
        

## Write a short comment describing this function

## This function computes the inverse of the special "matrix" returned 
## by makeCacheMatrix above. If the inverse has already been calculated 
## (and the matrix has not changed), 
## then the cachesolve should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        im <- x$getInverse()
        if (!is.null(im)) {
                message("getting cached data")
                return(im)
        }
        mat <- x$get()
        im <- solve(mat, ...)
        x$setInverse(im)
        im
}
